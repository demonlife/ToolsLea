* GDB 调试程序
** 基本命令
   l（list）：查看源代码
   l n1, n2 ：查看特定范围的源代码
   l main ： 显示特定函数源代码
   set listsize 50 ： 修改源代码显示行数
*** 断点
    b main：在函数main出设置断点
    b 13 ： 在源代码13行处设置断点
    b(break)：将下一行设置断点
    tbreak：设置临时断点（中断后失效）
    info breakpoints：查看所有断点信息
    d 3：delete，删除断点3，也可以使用范围“d 1-3”，无参数时删除全部断点
    disable 2 ： 禁用断点，也可以使用范围“disable 1-3”
    enable 2 ：启用断点2，也可以使用范围“enable 1-3”
    ignore 2 1：忽略2号中断一次
    条件式中断：
    b test if a == 10
    condition 4 a == 30
*** 执行
    r：执行
    n：单步执行，不跟踪到函数内部，step over
    s：单步执行，跟踪到函数内部，step in
    finish：继续执行直到当前函数结束，step out
    c： continue，执行执行，直到下一个断点
*** 堆栈
    where：查看调用堆栈，相同作用的命令还有info s, bt
    frame：查看当前堆栈，还可以显示当前代码
    info frame：获取当前堆栈更详细的信息
    可以用frame修改当前堆栈帧，然后查看其详细信息
    frame 1
*** 变量和参数
    info locals：显示局部变量
    info args：显示函数参数（自变量）
    p a：print 显示变量a的值
    p/x a：以16进制显示变量a的值
    p a + b：计算a + b的值
    x命令内存输出格式：
    d：十进制，u：十进制无符号，x：16进制，o：8进制，t：2进制，c：字符
    set variable：可用来修改变量的值， set variable a=100
*** 内存及寄存器
    x命令可以显示指定地址的内存数据
    格式：x/nfu [address]，
    n：显示内存单位（组或者行），f：格式，除了print格式外，还有字符串s和汇编i
    u：内存单位，b：1字节，h：2字节， w：4字节，g：8字节
    x/8w 0x0804843b //按4字节显示8组内存数据
    x/8i 0x0804843b // 显示8行汇编指令
    info registers // 显示所有寄存器数据
    p $eax // 显示单个寄存器的值
*** 反汇编代码
    set disassembly-flavor intel // 设置反汇编指令的格式
    disass funname // 反汇编funname函数
    可以用b *address设置汇编断点，然后用si和ni进行汇编级单步执行，这对于分析指针和
    寻址非常有用
*** 进程
    help info proc stat
    info proc mappings // 等价于 cat /proc/{pid}/maps
*** 线程
    可以在pthread_create处设置断点，当线程创建时会生成提示信息
    info thread // 查看所有线程列表
    thread 1 // 切换线程
*** 其他
    set follow-fork-mode child
    shell // 临时进入shell执行命令，exit返回
    call test("abc") // 调试时直接调用函数
    gdb --tui hello // 在终端窗口上显示一个源代码查看窗口
*** core dump
    ulimit -a // 查看系统的设置信息
    core file size (blocks, -c) 0：意味着在程序崩溃时不会生成core dump文件
    修改一下：sudo sh -c "ulimit -c unlimited; ./test" //执行test时，产所core文件

    gdb test core，此时最后几行提示会告诉我们错误的原因和代码位置，接下来就是gdb的
    技巧了，可以先输入where查看调用堆栈，info files 查看信息
    
