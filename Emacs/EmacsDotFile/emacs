(add-to-list 'load-path "~/.emacs.d/base_conf") ;; 基本的配置

(load "base.el")
(load "ibus_setting.el")

(add-to-list 'load-path "~/.emacs.d/plugins/evil") ;; 绑定vi的案件
(require 'evil)
(evil-mode 1)

(require 'package)
(add-to-list 'package-archives 
             '("marmalade" .
               "http://marmalade-repo.org/packages/"))
(package-initialize)
(add-to-list 'package-archives '("elpa". "http://tromey.com/elpa/"))

(add-to-list 'load-path "~/.emacs.d/plugins/tabbar") ;;设置tabbar
(require 'tabbar)
(tabbar-mode 1)
(load "tabbarsetting.el") ;; 键绑定设置


;; 设置session, 菜单上会多两项：最近访问过的文件和最近 修改过的文件
(add-to-list 'load-path "~/.emacs.d/plugins/session") ;;设置tabbar
(require 'session)
(add-hook 'after-init-hook 'session-initialize)

;; 保存上次打开的文件记录，那么可以使用 desktop
;; M-x desktop-save: 保存记录, desktop-clear:删除记住的内容
(load "desktop")
(desktop-load-default)
(desktop-read)

;; 把 C-x C-b 那个普通的 buffer menu 换成非常方便的 ibuffer
(add-to-list 'load-path "~/.emacs.d/plugins/session") ;;设置tabbar
(require 'ibuffer)
(global-set-key (kbd "C-x C-b") 'ibuffer)

(add-to-list 'load-path "~/.emacs.d/plugins") ;;设置tabbar
(require 'browse-kill-ring)
(global-set-key [(control c)(k)] 'browse-kill-ring)
(browse-kill-ring-default-keybindings)

(add-to-list 'load-path "~/.emacs.d/plugins/folding") ;;设置
(load "foldingsetting.el")

(add-to-list 'load-path "~/.emacs.d/plugins/hidefind") ;;设置找到匹配的隐藏
;; hide region
(require 'hide-region)
(global-set-key (kbd "C-c r") 'hide-region-hide)
(global-set-key (kbd "C-c R") 'hide-region-unhide)

;; hide lines
(require 'hide-lines)
(global-set-key (kbd "C-c l") 'hide-lines)
(global-set-key (kbd "C-c L") 'show-all-invisible)

;; 启用semantic
;(semantic-mode t)

;; 设置semantic工程目录
;(setq semanticdb-project-roots (list "/"))
;(global-ede-mode 1)

;(local-set-key "." 'semantic-complete-self-insert)
;(local-set-key ">" 'semantic-complete-self-insert)
;(add-hook 'speedbar-timer-hook
;          (lambda ()
;            (speedbar-refresh)))
;(setq speedbar-verbosity-level 0)

(load-file "~/.emacs.d/plugins/cedet-1.1/common/cedet.el")
(global-ede-mode 1)                      ; Enable the Project management system
(semantic-load-enable-code-helpers)      ; Enable prototype help and smart completion 
(global-srecode-minor-mode 1)            ; Enable template insertion menu

;; folding C/C++ code
;(require 'semantic-tag-folding)
;(defun c-folding-hook ()
;  (global-semantic-tag-folding-mode 1)
;  (local-set-key (kbd "C-c <left>") 'semantic-tag-folding-fold-block)
;  (local-set-key (kbd "C-c <right>") 'semantic-tag-folding-show-block)
;)
;(add-hook 'c-mode-common-hook 'c-folding-hook)

(require 'semantic-tag-folding nil 'noerror)
(global-semantic-tag-folding-mode 1)
;; 折叠代码
(define-key semantic-tag-folding-mode-map (kbd "C-c -") 'semantic-tag-folding-fold-block)
(define-key semantic-tag-folding-mode-map (kbd "C-c =") 'semantic-tag-folding-show-block) 

;; 整个buffer所有函数折叠与展开
(define-key semantic-tag-folding-mode-map (kbd "C-c . -") 'semantic-tag-folding-fold-all)
(define-key semantic-tag-folding-mode-map (kbd "C-c . =") 'semantic-tag-folding-show-all)

;; ecb
(add-to-list 'load-path "~/.emacs.d/plugins/ecb-2.40") ;;设置找到匹配的隐藏
(require 'ecb)
(require 'ecb-autoloads)
(setq stack-trace-on-error t)
(setq ecb-tip-of-the-day nil)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ecb-options-version "2.40"))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
 
; use IPython start

;; ipython, C-c C-c 可以在ipython页面中查看结果
(add-to-list 'load-path "~/.emacs.d/plugins/python-mode.el-6.1.3") 
(require 'python-mode)

(setq-default py-shell-name "ipython")
(setq-default py-which-bufname "IPython")
; use the wx backend, for both mayavi and matplotlib
(setq py-python-command-args
  '("--gui=wx" "--pylab=wx" "-colors" "Linux"))
(setq py-force-py-shell-name-p t)

; switch to the interpreter after executing code
(setq py-shell-switch-buffers-on-execute-p t)
(setq py-switch-buffers-on-execute-p t)
; don't split windows
(setq py-split-windows-on-execute-p nil)
; try to automagically figure out indentation
(setq py-smart-indentation t)

;(with-output-to-temp-buffer "*IPython Completions*"
;  (display-completion-list
;   (all-completions pattern completions)))
;; use IPython end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pymacs start
(add-to-list 'load-path "~/.emacs.d/Pymacs")
(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-exec "pymacs" nil t)
(autoload 'pymacs-load "pymacs" nil t)
(autoload 'pymacs-autoload "pymacs")
; ropemacs
(require 'pymacs)
(pymacs-load "ropemacs" "rope-")
;; pymacs end
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; auto-complete
(add-to-list 'load-path "~/.emacs.d/auto-complete")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/auto-complete/ac-dict")
(ac-config-default)

(add-to-list 'load-path
              "~/.emacs.d/yasnippet")
(require 'yasnippet)
(yas-global-mode 1)

;;80 character hilight
(require 'highlight-80+)
;;当某个扩展名的文件打开时,自动调用highlight-80+-mode
(add-hook 'c-mode-common-hook   (lambda () (highlight-80+-mode t) ) )
(add-hook 'text-mode-hook       (lambda () (highlight-80+-mode t) ) )
(add-hook 'emacs-lisp-mode-hook (lambda () (highlight-80+-mode t) ) )
(add-hook 'python-mode-hook     (lambda () (highlight-80+-mode t) ) )
(add-hook 'javascript-mode-hook (lambda () (highlight-80+-mode t) ) )
(add-hook 'html-mode-hook       (lambda () (highlight-80+-mode t) ) )
(add-hook 'conf-mode-hook       (lambda () (highlight-80+-mode t) ) )
(add-hook 'php-mode-hook        (lambda () (highlight-80+-mode t) ) )

(add-to-list 'load-path "~/.emacs.d/plugins/rainbow-mode")
(require 'rainbow-mode)
(dolist (hook '(css-mode-hook
        html-mode-hook))
        (add-hook hook (lambda () (rainbow-mode t))))

(require 'fill-column-indicator)        
(define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
(global-fci-mode t)

