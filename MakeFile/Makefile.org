* 自动化变量
  $@: 表示规则中的目标文件集。在模式规则中,如果有多个目标,
  那么,"$@"就是匹配于目标中模式定义的集合

  $%: 仅当目标是函数库文件中表示规则中的目标成员名。例如,如果一个目标是"foo.a
  (bar.o)",那么,"$%"就是"bar.o","$@"就是"foo.a"。如果目标不是函数库文件(Unix
  下是[.a],Windows 下是[.lib]),那么,其值为空

  %<: 依赖目标中的第一个目标名字。如果依赖目标是以模式(即"%")定义的,那么"$<"将
  是符合模式的一系列的文件集。注意,其是一个一个取出来的。

  $?: 所有比目标新的依赖目标的集合。以空格分隔

  $^: 所有的依赖目标的集合。以空格分隔。如果在依赖目标中有多个重复的,那个这个变量
  会去除重复的依赖目标,只保留一份

  $+: 这个变量很像"$^",也是所有依赖目标的集合。只是它不去除重复的依赖目标

  $*: 这个变量表示目标模式中"%"及其之前的部分。 如果目标是"dir/a.foo.b",
  并且目标的模式是"a.%.b",那么,"$*"的值就是"dir/a.foo"。
  如果目标中没有模式的定义,那么"$*"也就不能被推导出,但是,如果目标文件的
  后缀是 make 所识别的,那么"$*"就是除了后缀的那一部分。例如:如果目标是"foo.c",因
  为".c"是 make 所能识别的后缀名,所以,"$*"的值就是"foo"。这个特性是 GNU make 的,
  很有可能不兼容于其它版本的 make,所以,你应该尽量避免使用"$*",除非是在隐含规则
  或是静态模式中。如果目标中的后缀是 make 所不能识别的,那么"$*"就是空值
* 赋值
  https://stackoverflow.com/questions/448910/makefile-variable-assignment
  var = value 在调用时赋值
  var := value 在申明时赋值
  var ?= value 调用时查看变量是否已赋值，对未赋值的变量进行赋值
  var += value 在变量后追加一些值，赋值方式要看最初使用了=还是:=
* 调试Makefile变量
  http://coolshell.cn/articles/3790.html
  <var.mk>
  <test.mk>
  执行方法：
  make -f test.mk -f var.mk OBJS
  make -f test.mk -f var.mk d-foo
  make -f test.mk -f var.mk d-CFLAGS
  make -f test.mk -f var.mk d-COMPLILE.c
  解释：
  make后第一个-f是要测试的makefile， 第二个是debug makefile
  三个函数定义的说明：
  $(origin): 该变量来自哪儿，file表示文件，environment表示环境变量，还有其他变量：
  environment override, command line, override, automatic
  $(value): 打印出变量没有被展开的样子
  $(flavor): simple表示一般展开的变量，recursive表示递归展开的变量

